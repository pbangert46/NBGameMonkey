/* Generated By:JJTree&JavaCC: Do not edit this line. GameMonkeyParserConstants.java */
package org.gamemonkey.jcc.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface GameMonkeyParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 8;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 9;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 10;
  /** RegularExpression Id. */
  int GLOBAL = 12;
  /** RegularExpression Id. */
  int LOCAL = 13;
  /** RegularExpression Id. */
  int MEMBER = 14;
  /** RegularExpression Id. */
  int FUNCTION = 15;
  /** RegularExpression Id. */
  int THIS = 16;
  /** RegularExpression Id. */
  int DOSTRING = 17;
  /** RegularExpression Id. */
  int TABLE = 18;
  /** RegularExpression Id. */
  int IF = 19;
  /** RegularExpression Id. */
  int ELSE = 20;
  /** RegularExpression Id. */
  int FOR = 21;
  /** RegularExpression Id. */
  int FOREACH = 22;
  /** RegularExpression Id. */
  int WHILE = 23;
  /** RegularExpression Id. */
  int DOWHILE = 24;
  /** RegularExpression Id. */
  int BREAK = 25;
  /** RegularExpression Id. */
  int CONTINUE = 26;
  /** RegularExpression Id. */
  int RETURN = 27;
  /** RegularExpression Id. */
  int TRUE = 28;
  /** RegularExpression Id. */
  int FALSE = 29;
  /** RegularExpression Id. */
  int NULL = 30;
  /** RegularExpression Id. */
  int PRINT = 31;
  /** RegularExpression Id. */
  int THREAD = 32;
  /** RegularExpression Id. */
  int YIELD = 33;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 34;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 35;
  /** RegularExpression Id. */
  int HEX_LITERAL = 36;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 37;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 38;
  /** RegularExpression Id. */
  int DECIMAL_FLOATING_POINT_LITERAL = 39;
  /** RegularExpression Id. */
  int DECIMAL_EXPONENT = 40;
  /** RegularExpression Id. */
  int HEXADECIMAL_FLOATING_POINT_LITERAL = 41;
  /** RegularExpression Id. */
  int HEXADECIMAL_EXPONENT = 42;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 43;
  /** RegularExpression Id. */
  int STRING_LITERAL = 44;
  /** RegularExpression Id. */
  int IDENTIFIER = 45;
  /** RegularExpression Id. */
  int LETTER = 46;
  /** RegularExpression Id. */
  int DIGIT = 47;
  /** RegularExpression Id. */
  int OTHER = 48;
  /** RegularExpression Id. */
  int LPAREN = 49;
  /** RegularExpression Id. */
  int RPAREN = 50;
  /** RegularExpression Id. */
  int LBRACE = 51;
  /** RegularExpression Id. */
  int RBRACE = 52;
  /** RegularExpression Id. */
  int LBRACKET = 53;
  /** RegularExpression Id. */
  int RBRACKET = 54;
  /** RegularExpression Id. */
  int SEMICOLON = 55;
  /** RegularExpression Id. */
  int COMMA = 56;
  /** RegularExpression Id. */
  int DOT = 57;
  /** RegularExpression Id. */
  int AT = 58;
  /** RegularExpression Id. */
  int ASSIGN = 59;
  /** RegularExpression Id. */
  int LT = 60;
  /** RegularExpression Id. */
  int BANG = 61;
  /** RegularExpression Id. */
  int TILDE = 62;
  /** RegularExpression Id. */
  int HOOK = 63;
  /** RegularExpression Id. */
  int COLON = 64;
  /** RegularExpression Id. */
  int EQ = 65;
  /** RegularExpression Id. */
  int LE = 66;
  /** RegularExpression Id. */
  int GE = 67;
  /** RegularExpression Id. */
  int NE = 68;
  /** RegularExpression Id. */
  int SC_OR = 69;
  /** RegularExpression Id. */
  int SC_AND = 70;
  /** RegularExpression Id. */
  int INCR = 71;
  /** RegularExpression Id. */
  int DECR = 72;
  /** RegularExpression Id. */
  int PLUS = 73;
  /** RegularExpression Id. */
  int MINUS = 74;
  /** RegularExpression Id. */
  int STAR = 75;
  /** RegularExpression Id. */
  int SLASH = 76;
  /** RegularExpression Id. */
  int BIT_AND = 77;
  /** RegularExpression Id. */
  int BIT_OR = 78;
  /** RegularExpression Id. */
  int XOR = 79;
  /** RegularExpression Id. */
  int REM = 80;
  /** RegularExpression Id. */
  int LSHIFT = 81;
  /** RegularExpression Id. */
  int PLUSASSIGN = 82;
  /** RegularExpression Id. */
  int MINUSASSIGN = 83;
  /** RegularExpression Id. */
  int STARASSIGN = 84;
  /** RegularExpression Id. */
  int SLASHASSIGN = 85;
  /** RegularExpression Id. */
  int ANDASSIGN = 86;
  /** RegularExpression Id. */
  int ORASSIGN = 87;
  /** RegularExpression Id. */
  int XORASSIGN = 88;
  /** RegularExpression Id. */
  int REMASSIGN = 89;
  /** RegularExpression Id. */
  int LSHIFTASSIGN = 90;
  /** RegularExpression Id. */
  int RSIGNEDSHIFTASSIGN = 91;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFTASSIGN = 92;
  /** RegularExpression Id. */
  int ELLIPSIS = 93;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFT = 94;
  /** RegularExpression Id. */
  int RSIGNEDSHIFT = 95;
  /** RegularExpression Id. */
  int GT = 96;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_FORMAL_COMMENT = 1;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<token of kind 6>",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 11>",
    "\"global\"",
    "\"Local\"",
    "\"member\"",
    "\"function\"",
    "\"this\"",
    "\"dostring\"",
    "\"table\"",
    "\"if\"",
    "\"else\"",
    "\"for\"",
    "\"foreach\"",
    "\"while\"",
    "\"dowhile\"",
    "\"break\"",
    "\"continue\"",
    "\"return\"",
    "\"true\"",
    "\"false\"",
    "\"null\"",
    "\"print\"",
    "\"thread\"",
    "\"yield\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<DECIMAL_FLOATING_POINT_LITERAL>",
    "<DECIMAL_EXPONENT>",
    "<HEXADECIMAL_FLOATING_POINT_LITERAL>",
    "<HEXADECIMAL_EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "<OTHER>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"@\"",
    "\"=\"",
    "\"<\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"<<\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\"<<=\"",
    "\">>=\"",
    "\">>>=\"",
    "\"...\"",
    "\">>>\"",
    "\">>\"",
    "\">\"",
  };

}
